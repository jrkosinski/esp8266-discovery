{
  "_args": [
    [
      {
        "raw": "lasync@~1.1.0",
        "scope": null,
        "escapedName": "lasync",
        "name": "lasync",
        "rawSpec": "~1.1.0",
        "spec": ">=1.1.0 <1.2.0",
        "type": "range"
      },
      "D:\\Clients\\Self\\esp8266-discovery\\client\\node_modules\\node-netcat"
    ]
  ],
  "_from": "lasync@>=1.1.0 <1.2.0",
  "_id": "lasync@1.1.0",
  "_inCache": true,
  "_location": "/lasync",
  "_npmUser": {
    "name": "quim",
    "email": "joaquim.serafim@gmail.com"
  },
  "_npmVersion": "1.3.24",
  "_phantomChildren": {},
  "_requested": {
    "raw": "lasync@~1.1.0",
    "scope": null,
    "escapedName": "lasync",
    "name": "lasync",
    "rawSpec": "~1.1.0",
    "spec": ">=1.1.0 <1.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/node-netcat"
  ],
  "_resolved": "https://registry.npmjs.org/lasync/-/lasync-1.1.0.tgz",
  "_shasum": "be54d39e74bdfc7cacda61ebc2419914cb177462",
  "_shrinkwrap": null,
  "_spec": "lasync@~1.1.0",
  "_where": "D:\\Clients\\Self\\esp8266-discovery\\client\\node_modules\\node-netcat",
  "author": {
    "name": "@joaquimserafim"
  },
  "bugs": {
    "url": "https://github.com/joaquimserafim/lasync/issues"
  },
  "dependencies": {},
  "description": "An simple and tiny async library",
  "devDependencies": {
    "tape": "~2.3.2"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "be54d39e74bdfc7cacda61ebc2419914cb177462",
    "tarball": "https://registry.npmjs.org/lasync/-/lasync-1.1.0.tgz"
  },
  "homepage": "https://github.com/joaquimserafim/lasync",
  "keywords": [
    "async",
    "flow",
    "callbacks"
  ],
  "license": "ISC",
  "main": "index.js",
  "maintainers": [
    {
      "name": "quim",
      "email": "joaquim.serafim@gmail.com"
    }
  ],
  "name": "lasync",
  "optionalDependencies": {},
  "readme": "# lasync\n\nAn simple and tiny async library for control flow.\n\n<a href=\"https://nodei.co/npm/lasync/\"><img src=\"https://nodei.co/npm/lasync.png?downloads=true\"></a>\n\n[![Build Status](https://travis-ci.org/joaquimserafim/lasync.png?branch=master)](https://travis-ci.org/joaquimserafim/lasync)\n\n[![browser support](https://ci.testling.com/joaquimserafim/lasync.png)](https://ci.testling.com/joaquimserafim/lasync)\n\n**V1.1**\n\n####series\n\nRuns an array of functions in series, each passing their results to the next in the array, but, if any of the functions pass an error to the callback, the next function is not executed and the main callback is immediately called with the error.\n\n\n\tlasync.series(\"array tasks\", [callback(err, results)])\n    \n    // results is an array\n      \n    // CODE\n    \n    var lasync = require('lasync');\n    \n    function a (cb) {\n        console.log('run function \"a\"');\n        setTimeout(function () {\n          return cb(null);\n        }, 3000);\n    }\n    \n    function b (cb) {\n        console.log('run function \"b\"');\n        setTimeout(function () {\n          return cb(null, 'Hello World');\n        }, 2500);\n    }\n    \n    function c (cb) {\n        console.log('run function \"c\"');\n        return cb(null, 1);\n    }\n    \n    lasync.series([a, b, c], function (err, results) {\n      if (err) throw err;\n      console.log(results);\n    });\n      \n\n####parallel\n\nRun an array of functions in parallel, without waiting until the previous function has completed, but, if any of the functions pass an error to the callback, the main callback is immediately called with the value of the error.\n\n\tlasync.parallel(\"array tasks\", [callback(err, results)])\t\t\n    \n    // results is an array\n    \n    \n    // CODE\n    \n    var lasync = require('lasync');\n    \n    \n    // the same functions for example\n    function a (cb) {\n        console.log('run function \"a\"');\n        setTimeout(function () {\n          return cb(null);\n        }, 3000);\n    }\n    \n    function b (cb) {\n        console.log('run function \"b\"');\n        setTimeout(function () {\n          return cb(null, 'Hello World');\n        }, 2500);\n    }\n    \n    function c (cb) {\n        console.log('run function \"c\"');\n        return cb(null, 1);\n    }\n    \n    lasync.parallel([a, b, c]);\n    \n    \n####waterfall\n\nRuns an array of functions in series, each passing their results to the next in the array, but, if any of the functions pass an error to the callback, the next function is not executed and the main callback is immediately called with the error.\n\n\n\n    waterfall(\"array tasks\", [callback(err, result)])\n    \n    // results is an array\n      \n    // CODE\n    \n    var lasync = require('lasync');\n    \n    function a (cb) {\n        console.log('run function \"a\"');\n        setTimeout(function () {\n          return cb(null, 'Hello');\n        }, 3000);\n    }\n    \n    function b (arg, cb) {\n        console.log('run function \"b\"');\n        setTimeout(function () {\n          return cb(null, arg, 'World');\n        }, 2500);\n    }\n    \n    function c (arg1, arg2, cb) {\n        console.log('run function \"c\"');\n        return cb(null, arg1 + ' ' + arg2);\n    }\n    \n    waterfall([a, b, c], function (err, result) {\n      if (err) throw err;\n      console.log(result);\n    });\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/joaquimserafim/lasync.git"
  },
  "scripts": {
    "test": "tape test"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": {
      "ie": [
        8,
        9
      ],
      "firefox": [
        13
      ],
      "chrome": [
        20
      ],
      "safari": [
        5.1
      ],
      "opera": [
        12
      ]
    }
  },
  "version": "1.1.0"
}
