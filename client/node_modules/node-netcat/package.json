{
  "_args": [
    [
      {
        "raw": "node-netcat",
        "scope": null,
        "escapedName": "node-netcat",
        "name": "node-netcat",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\Clients\\Self\\esp8266-discovery\\client"
    ]
  ],
  "_from": "node-netcat@latest",
  "_id": "node-netcat@1.4.8",
  "_inCache": true,
  "_location": "/node-netcat",
  "_npmUser": {
    "name": "quim",
    "email": "joaquim.serafim@gmail.com"
  },
  "_npmVersion": "1.4.21",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-netcat",
    "scope": null,
    "escapedName": "node-netcat",
    "name": "node-netcat",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-netcat/-/node-netcat-1.4.8.tgz",
  "_shasum": "a5ba95c25243fffbf52270dec65ac049fdf37021",
  "_shrinkwrap": null,
  "_spec": "node-netcat",
  "_where": "D:\\Clients\\Self\\esp8266-discovery\\client",
  "author": {
    "name": "@joaquimserafim"
  },
  "bugs": {
    "url": "https://github.com/joaquimserafim/node-netcat/issues"
  },
  "dependencies": {
    "lasync": "~1.1.0",
    "underscore": "~1.6.0"
  },
  "description": "nc/netcat - arbitrary TCP and UDP connections and listens in node.js",
  "devDependencies": {
    "tape": "~2.4.2"
  },
  "directories": {},
  "dist": {
    "shasum": "a5ba95c25243fffbf52270dec65ac049fdf37021",
    "tarball": "https://registry.npmjs.org/node-netcat/-/node-netcat-1.4.8.tgz"
  },
  "gitHead": "020fee4bd5bfe8340d37c8d8cfd62ea22f594633",
  "homepage": "https://github.com/joaquimserafim/node-netcat#readme",
  "keywords": [
    "netcat",
    "nc",
    "tcp",
    "udp",
    "portscan"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "quim",
      "email": "joaquim.serafim@gmail.com"
    }
  ],
  "name": "node-netcat",
  "optionalDependencies": {},
  "readme": "#node-netcat\n\n\n<a href=\"https://nodei.co/npm/node-netcat/\"><img src=\"https://nodei.co/npm/node-netcat.png?downloads=true\"></a>\n\n[![Build Status](https://travis-ci.org/joaquimserafim/node-netcat.png?branch=master)](https://travis-ci.org/joaquimserafim/node-netcat)\n\n<img src=\"https://david-dm.org/joaquimserafim/lasync.png\">\n\n###Description\n\n  Arbitrary TCP and UDP connections and listens to be used in Node.js\n\t\n\tTrying to implement all that \"nc\" allows to be used in Node.js, this is a good \n\tmodule to implement simple server/client testing stuff or even to create simple\n\ttcp servers and clients.\n\t\t\n\tv1.4\n\t\t. open TCP/UDP connections and sending messages (client)\n\t\t. listen on arbitary TCP/UDP ports and response to the received messages (server)\n\t\t. PortScan (portscan)\n\t\t. TCP only deal with IPV4\n\t\n\t\n\tnc listener (-k -l cmdline)      -> Necat.server\n\tnc host port                     -> Netcat.client\n\tnc -z host port_start[-port_end] -> Netcat.portscan\n\n\n####Installation\n\n\tnpm install (--save) node-netcat\n\n\n##Netcat -> API\n\n####Client\n\n\tnew Netcat.client(port, host, [options])\n\t\n\toptions = {\n\t // define a connection timeout\n\t\ttimeout: 60000,\n\t // buffer(default, to receive the original Buffer objects), ascii, hex,utf8, base64\n\t  read_encoding: 'buffer'\n\t }\n\n\t// client init connection\n\t client.start()\n\t\n\t\n\tsend data:\n\t\n\tclient.send('message - don't need pass as Buffer, [close_connection], [callback]);\n\t\n\tclose_connection: false is the default value\n\n\n\tevents:\n\t\n\t\ton('open', function ())\n\t\ton('data', function (data))\n\t\ton('error', function (err))\n\t\ton('close', function ())\n\t\t\t\n\t\t\t\n####Server (-k -l)\n\n\tnew Netcat.server(port, [host], [options])\n\t\n\toptions = {\n\t // define a connection timeout\n\t\ttimeout: 60000,\n\t // buffer(default, to receive the original Buffer objects), ascii, hex,utf8, base64\n\t  read_encoding: 'buffer'\n\t }\n\t\t\t\n\tserver.listen()// init server\n\t\n\tserver.close()// close server but must not exists active clients\n\t\n\t\n\tsend data to a client:\n\t\tserver.send(client, ' don't need to pass as Buffer, [close_connection], [callback]);\n\t\n\t\tclose_connection: false is the default value, this is a way to close \n\t\t\tthe connection with a client.\n\t\tcallback: parameter will be executed when the data is finally written \n\t\t\tout - this may not be immediately.\n\t\n\t\n\tget clients:\n\t\n\tserver.getClients();// return an array\n\t\n\t\n\tevents: \n\t\n\t\ton('ready', function ())// server it's ready\n\t\ton('data', function (client, data))\n\t\ton('client_on', function (client))// client connect\n\t\ton('client_off', function (client))// client disconnect\n\t\ton('error', function (err))\n\t\ton('close', function ())// closes the server\n\t\t\n\n####UDP Client (-u)\n\n    Netcat.udpClient(port, host, [options])\n    \n    options = {\n\t // define a connection timeout\n\t\ttimeout: 60000,\n\t // buffer(default, to receive the original Buffer objects), ascii, hex,utf8, base64\n\t  read_encoding: 'buffer''\n\t }\n    \n    events:\n\t\ton('open', function ())\n\t\ton('message', function (message, {port, address}, protocol_family))\n\t\ton('error', function (err))\n\t\ton('close', function ())\n        \n        // protocol_family - ipv4 | ipv6\n\n    \n    methods:\n        close()\n        start() // init client\n        send('message')\n     \n    \"message\" not pass a Buffer!!!\n \n#####  *A Note about UDP datagram size\n\n> The maximum size of an IPv4/v6 datagram depends on the MTU (Maximum Transmission Unit) and on the Payload Length field size.\n> \n> The Payload Length field is 16 bits wide, which means that a normal payload cannot be larger than 64K octets including internet header and data (65,507 bytes = 65,535 − 8 bytes UDP header − 20 bytes IP header); this is generally true for loopback interfaces, but such long datagrams are impractical for most hosts and networks.\n> \n> The MTU is the largest size a given link layer technology can support for datagrams. For any link, IPv4 mandates a minimum MTU of 68 octets, while the recommended MTU for IPv4 is 576 (typically recommended as the MTU for dial-up type applications), whether they arrive whole or in fragments.\n> \n> For IPv6, the minimum MTU is 1280 octets, however, the mandatory minimum fragment reassembly buffer size is 1500 octets. The value of 68 octets is very small, since most current link layer technologies have a minimum MTU of 1500 (like Ethernet).\n> \n> Note that it's impossible to know in advance the MTU of each link through which a packet might travel, and that generally sending a datagram greater than the (receiver) MTU won't work (the packet gets silently dropped, without informing the source that the data did not reach its intended recipient). \n\n\n####UDP Server (-u -k -l)\n\n    Netcat.udpServer(port, host, [options])\n    \n    options = {\n\t // define a connection timeout\n\t\ttimeout: 60000,\n\t // buffer(default, to receive the original Buffer objects), ascii, hex,utf8, base64\n\t  read_encoding: 'buffer''\n\t }\n\n    methods:\n        close()\n        bind() // binding to a port\n\n\n    events:\n\t\ton('ready', function ())\n\t\ton('data', function (client, data, protocol family))\n\t\ton('error', function (err))\n\t\ton('close', function ())\n\t\t\n\t\t\t\t\t\n####PortScan (-z [port_start-port_end])\n\t\n\tscan.run(host, ports*, cb)\n\t\n\t* a single port 80 or between various ports 22-80\n\t\n\n\n##Examples\n\n####Client\n\n\tvar Netcat = require('node-netcat');\n\t\n\tvar client = Netcat.client(5000, 'localhost');\n\t\n\tclient.on('open', function () {\n\t  console.log('connect');\n\t  client.send('this is a test' + '\\n');\n\t});\n\t\n\tclient.on('data', function (data) {\n\t  console.log(data.toString('ascii'));\n\t  client.send('Goodbye!!!', true);\n\t});\n\t\n\tclient.on('error', function (err) {\n\t  console.log(err);\n\t});\n\t\n\tclient.on('close', function () {\n\t  console.log('close');\n\t});\n\n\tclient.start();\n\n####Server\n\n\tvar Netcat = require('node-netcat');\n\t\n\tvar server = Netcat.server(5000);\n\t\n\t\n\tserver.on('ready', function () { console.log('server ready'); });\n\tserver.on('data', function (client, data) { console.log('server rx: ' + data + ' from ' + client); });\n\tserver.on('client_on', function (client) { console.log('client on ', client); });\n\tserver.on('client_of', function (client) { console.log('client off ', client); });\n\tserver.on('error', function (err) { console.log(err); });\n\tserver.on('close', function () { console.log('server closed'); });\n\n\tserver.listen();// start to listening\n\t\t\n\t// get active clients\n\tvar clients = server.getClients();\n\t\n\t// send messages to clients\t and close the connection\n\tfor (var client in clients) {\n      server.send(clients[client], 'received ' + data, true);\n    }\n\n\t// or a normal message\t\n\tserver.send(client, 'message');\n\t\n\n####UDP Client\n\n    var client = Netcat.udpClient(5000, '127.0.0.1');\n    \n    client.on('open', function () {  console.log('open'); });\n    \n    client.once('error', function (err) {  console.error('err'); });\n    \n    client.once('close', function () { console.log('client, closed'); });\n    \n    clien.send('Hello World');\n\n\t\n####UDP Server\n\n    var server = Netcat.udpServer(5000, '127.0.0.1');\n    \n    server.on('data', function (msg, client, protocol) {\n      console.log('rx: ' + msg + ', from ' + client);\n    });\n\n    server.on('ready', function () { console.log('ready'); });\n      \n    server.once('error', function (err) { console.log(err); });\n    \n    server.once('close', function () { console.log('close'); });\n    \n    server.bind();\n    \n    \n    setTimeout(function () {\n      server.close();\n    }, 30000);\n\n\n\n####PortScan\n\n\tvar Netcat = require('node-netcat');\n\n\tvar scan = Netcat.portscan();\n\t\n\tscan.run('google.com', '80-81', function (err, res) {\n\t\tconsole.log(err, res);\t\n\t});\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/joaquimserafim/node-netcat.git"
  },
  "scripts": {
    "test": "tape test/index.js"
  },
  "version": "1.4.8"
}
